@inherits LayoutComponentBase

@page "/data-computation"
@inject DataComputationService ComputationService
@inject DataPersistenceService PersistenceService
@inject IJSRuntime JSRuntime

<h3>Data Computation</h3>

<button @onclick="StartComputation">Start Computation</button>
<button @onclick="SaveData" disabled="@(!isComputationComplete)">Save Data</button>
<button @onclick="DownloadXml" disabled="@(!isDataSaved)">Download XML</button>
<button @onclick="DownloadBinary" disabled="@(!isDataSaved)">Download Binary</button>

@code {
    private bool isComputationComplete;
    private bool isDataSaved;

    private async Task StartComputation()
    {
        ComputationService.StartComputation();
        isComputationComplete = true;
    }

    private async Task SaveData()
    {
        //await PersistenceService.SaveDataAsync(ComputationService.GetData());
        isDataSaved = true;
    }

    private async Task DownloadXml()
    {
        var xmlData = await PersistenceService.GetXmlDataAsync();
        var fileName = "data.xml";

        // Convert byte array to Base64 string for downloading in JavaScript
        var base64XmlData = Convert.ToBase64String(xmlData);

        // Use JS interop to initiate download
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64XmlData, "application/xml");
    }

    private async Task DownloadBinary()
    {
        var binaryData = await PersistenceService.GetBinaryDataAsync();
        var fileName = "data.bin";

        // Convert byte array to Base64 string for downloading in JavaScript
        var base64BinaryData = Convert.ToBase64String(binaryData);

        // Use JavaScript interop to initiate download as a .bin file
        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64BinaryData, "application/octet-stream");
    }
}

